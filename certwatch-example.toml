# Cert-Watch Example Configuration
#
# This file provides an example of all available configuration options.
# Copy this file to 'certwatch.toml' and adjust the settings to your needs.

# The logging level for the application.
# Options: "trace", "debug", "info", "warn", "error"
log_level = "info"

# The number of concurrent domain processing tasks.
# Defaults to the number of logical CPU cores.
# concurrency = 8

# =============================================================================
# Metrics Configuration
# =============================================================================
[metrics]
# Log metrics to the console periodically.
log_metrics = false
# The interval in seconds for logging aggregated metrics.
log_aggregation_seconds = 60

# =============================================================================
# Performance Configuration
# =============================================================================
[performance]
# The capacity of the central domain queue.
# A larger queue can handle bursts of domains but uses more memory.
queue_capacity = 100000

# =============================================================================
# Network Configuration
# =============================================================================
[network]
# The URL of the CertStream WebSocket server.
certstream_url = "wss://certstream.calidog.io"
# The percentage of domains to process (0.0 to 1.0).
# 1.0 means all domains will be processed.
sample_rate = 1.0
# Whether to accept invalid TLS certificates (for testing with local servers).
allow_invalid_certs = false

# =============================================================================
# Advanced Rules Configuration
# =============================================================================
[rules]
# A list of file paths containing advanced filtering rules in YAML format.
# This is the primary way to define detection logic, supporting `all` (AND),
# `any` (OR), and nested boolean conditions. This section replaces the legacy
# `[matching]` table.
#
# Example `data/rules/common.yml`:
#
# # A list of regex patterns to ignore before any processing.
# # This is highly efficient for filtering out high-volume, trusted domains.
# ignore:
#   - "\\.google\\.com$"
#   - "\\.facebook\\.com$"
#   - "\\.cloudfront\\.net$"
#
# # The list of detection rules.
# rules:
#   - name: "Complex Bank Phish"
#     # Looks for domains that contain a bank name AND either are on a non-corporate
#     # network OR use a suspicious TLD.
#     all:
#       - domain_regex: '(chase|wellsfargo|bankofamerica)'
#       - any:
#           - not_asns: [7843, 3589, 7132] # ASNs for Chase, Wells Fargo, Bank of America
#           - domain_regex: '\\.(biz|info)$'
#
# rule_files = ["data/rules/test-rule.yml"]


# =============================================================================
# DNS Configuration
# =============================================================================
[dns]
# The IP address of the DNS resolver to use (e.g., "8.8.8.8:53").
# If not set, the system's default resolver will be used.
# resolver = "8.8.8.8:53"

# The timeout in milliseconds for a single DNS query.
timeout_ms = 5000

# DNS retry and backoff settings.
standard_retries = 3
standard_initial_backoff_ms = 500
nxdomain_retries = 10
nxdomain_initial_backoff_ms = 10000

[dns.health]
# The failure rate threshold to trigger the unhealthy state (e.g., 0.95 for 95%).
failure_threshold = 0.95
# The time window in seconds to consider for the failure rate calculation.
window_seconds = 120
# A known-good domain to resolve to check for recovery.
recovery_check_domain = "google.com"
# The interval in seconds between recovery checks when the system is unhealthy.
recovery_check_interval_seconds = 10

# =============================================================================
# Enrichment Configuration
# =============================================================================
[enrichment]
# Path to the TSV ASN database file.
# The file should be in the format: START_IP<TAB>END_IP<TAB>ASN<TAB>COUNTRY<TAB>NAME
# Download from: https://iptoasn.com/
# REQUIRED: Path to the TSV ASN database file.
asn_tsv_path = "data/enrichment/ip2asn-combined.tsv"

# =============================================================================
# Output Configuration
# =============================================================================
[output]
# The format to use for stdout output. Options: "Json", "PlainText"
format = "PlainText"

# Configuration for Slack alerts.
[output.slack]
# Enables or disables Slack notifications.
enabled = false
# The Slack incoming webhook URL.
webhook_url = ""
# The maximum number of alerts to batch together before sending.
batch_size = 50
# The maximum time in seconds to wait before sending a batch, even if it's not full.
batch_timeout_seconds = 300

# =============================================================================
# Deduplication Configuration
# =============================================================================
[deduplication]
# The size of the deduplication cache.
cache_size = 100000
# The time-to-live for cache entries in seconds.
cache_ttl_seconds = 3600
